#!/usr/bin/env python
# coding: utf-8

# ###### MOVIE RATING ANALYTICS (ADVANCED VISULIZATION)

# In[1]:


import pandas as pd
import os


# In[2]:


os.getcwd() ## if you want to change the working directory


# In[3]:


movies=pd.read_csv(r"D:\Data Science with AI\29th-jan-2024\MOVIE RATINGS _ ADVANCE VISUALIZATION _ EDA 1\Movie-Rating.csv")


# In[4]:


movies


# In[5]:


len(movies)


# In[6]:


movies.head()


# In[7]:


movies.tail()


# In[8]:


movies.columns


# In[9]:


movies.columns=['Film','Genre','Critic Rating','Audience Rating','BudgetMillions','Year']


# In[10]:


movies.head()


# In[11]:


movies.info()


# In[12]:


movies.describe()
# if you look at the year the data type is int but when you look at the mean value it showing 2009 which is meaningless
# we have to change to categroy type 
# also from object datatype we will convert to category datatypes


# In[13]:


movies['Film']
#Movies Audience Rating %


# In[14]:


movies.Film


# In[15]:


movies.Film=movies.Film.astype('category')


# In[16]:


movies.Film


# In[17]:


movies.head()


# In[18]:


movies.info()


# In[19]:


movies.Genre=movies.Genre.astype('category')
movies.Year=movies.Year.astype('category')


# In[20]:


movies.Genre


# In[21]:


movies.Year


# In[22]:


movies.info()


# In[23]:


movies.Genre.cat.categories


# In[24]:


movies.describe()


# ######  working with joint plots
# 

# In[25]:


from matplotlib import pyplot as plt
import seaborn as sns
get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')


# ##### basically joint plot is a scatter plot & it find the relation b/w audiene & critics
# also if you look up you can find the uniform distribution (critics)and normal distriution (audience)

# In[26]:


j=sns.jointplot( data=movies , x='Critic Rating' , y='Audience Rating')
# Audience rating is more dominant then critics rating
# Based on this we find out as most people are most liklihood to watch audience rating & less likely to wathc critics rating
# let me explain the excel - if you filter audience rating & critic rating. critic rating has very low values compare to audience rating 


# In[27]:


j=sns.jointplot( data=movies,x='Critic Rating',y='Audience Rating' , kind='hex')


# In[28]:


j=sns.jointplot( data=movies , x='Critic Rating', y='Audience Rating', kind='reg')


# In[29]:


j=sns.jointplot( data=movies,x='Critic Rating',y='Audience Rating' , kind='hex')


# In[30]:


#Histograms

# <<< chat1

m1 = sns.distplot(movies["Audience Rating"])

#y - axis generated by seaborn automatically that is the powefull of seaborn gallery


# In[31]:


sns.set_style('darkgrid')


# In[32]:


m2=sns.distplot(movies["Audience Rating"],bins=15)


# In[33]:


#sns.set_style('darkgrid')
n1=plt.hist(movies["Audience Rating"],bins=15)


# In[34]:


sns.set_style('white')
n2=plt.hist(movies["Audience Rating"],bins=15)


# In[35]:


sns.set_style('white')
n1=plt.hist(movies["Audience Rating"],bins=20)


# In[36]:


sns.set_style('darkgrid')
b2=sns.distplot(movies["Audience Rating"],bins=25)


# In[37]:


b2 = plt.hist(movies["Critic Rating"],bins=30) #uniform distribution


# ###### creating stacked histograms

# In[38]:


#h1=plt.hist(movies.BudgetMillions)
plt.hist(movies.BudgetMillions)
plt.show


# In[39]:


plt.hist(movies[movies.Genre=='Drama'].BudgetMillions)
plt.show


# In[40]:


sns.distplot(movies[movies.Genre=='Drama'].BudgetMillions)
plt.show


# In[41]:


movies.head()


# ###### movies.Genre.unique()

# In[42]:


# Below plots are stacked histogram becuase overlaped
plt.hist(movies[movies.Genre=='Drama'].BudgetMillions,bins=15)
plt.hist(movies[movies.Genre=='Action'].BudgetMillions,bins=15)
plt.hist(movies[movies.Genre=='Thriller'].BudgetMillions,bins=15)
plt.legend
plt.show


# In[43]:


plt.hist([movies [movies.Genre == 'Action'    ].BudgetMillions,\
          movies [movies.Genre == 'Drama'   ].BudgetMillions,\
          movies  [movies.Genre == 'Thriller'].BudgetMillions,\
          movies  [movies.Genre == 'Comedy'  ].BudgetMillions],
        bins=20, stacked=True)
plt.show()


# ###### if you have 100 categories you cannot copy & paste all the things

# In[44]:


for gen  in movies.Genre.cat.categories:
    print(gen)


# In[45]:


vis1 = sns.lmplot(data=movies, x='Critic Rating', y='Audience Rating',\
     fit_reg=False )


# In[46]:


# Print the columns of the 'movies' DataFrame
print(movies.columns)

# Check if the columns are present
if 'Audience Rating' in movies.columns and 'Critic Rating' in movies.columns:
    # Your seaborn code here
    vis1 = sns.lmplot(data=movies, x='Critic Rating', y='Audience Rating', fit_reg=False, hue='Genre')
else:
    print("Columns not found in the DataFrame.")


# In[47]:


vis1= sns.lmplot(data=movies , x='Critic Rating' , y='Audience Rating' ,\
                fit_reg=False, hue='Genre' , height=10,aspect=1)


# In[48]:


# Kernal Density Estimate plot ( KDE PLOT) 
# how can i visulize audience rating & critics rating . using scatterplot


# In[49]:


#pip install seaborn matplotlib


# In[50]:


#Assuming 'movies' is your DataFrame
k1 = sns.kdeplot(data=movies, x='Critic Rating', y='Audience Rating')
plt.show()


# In[51]:


#pip install --upgrade seaborn matplotlib


# In[52]:


import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'movies' is your DataFrame
k2 = sns.kdeplot(x=movies['Critic Rating'], y=movies['Audience Rating'], shade_lowest=False, cmap='Greens_r')
plt.show()


# In[53]:


k1=sns.kdeplot(x=movies['Critic Rating'] , y=movies['Audience Rating'] ,shade=True,shade_lowest=False,cmap='Reds')


# In[54]:


sns.set_style('dark')
k1= sns.kdeplot(x=movies['BudgetMillions'], y=movies['Audience Rating'] ,shade_lowest=False ,cmap='Greens_r')


# In[55]:


sns.set_style('dark')
k1=sns.kdeplot(x=movies['BudgetMillions'], y=movies['Audience Rating'])


# In[56]:


#subplots

f, ax=plt.subplots(1,2, figsize=(12,6))


# In[57]:


f , axes=plt.subplots(1,2 ,figsize=(12,6))

k1=sns.kdeplot(x=movies['BudgetMillions'],y=movies['Audience Rating'],ax=axes[0])
k2=sns.kdeplot(x=movies['BudgetMillions'],y=movies['Critic Rating'], ax=axes[1])


# In[58]:


axes


# In[59]:


#Box plots

w=sns.boxplot(data=movies ,x='Genre' ,y='Critic Rating')


# In[60]:


#Violin plot

z=sns.violinplot(data=movies ,x='Genre' ,y='Critic Rating')


# In[61]:


w1=sns.boxplot(data=movies[movies.Genre=='Drama'] ,x='Year' ,y='Critic Rating')


# In[62]:


z= sns.violinplot(data=movies[movies.Genre=='Drama'],x='Year' ,y='Critic Rating')


# In[63]:


# Creating a facet grid


# In[64]:


g= sns.FacetGrid(movies ,row='Genre' ,col='Year',hue='Genre')#kind of subplots


# In[66]:


plt.scatter(x=movies['Critic Rating'],y=movies['Audience Rating'])


# In[70]:


g= sns.FacetGrid(movies ,row='Genre' ,col='Year' ,hue='Genre')
g=g.map(plt.scatter ,'Critic Rating' ,'Audience Rating') #scatterplots are mapped in facetgrid


# In[71]:


# you can populated any type of chat

g=sns.FacetGrid(movies ,row='Genre' ,col='Year' ,hue='Genre')
g=g.map(plt.hist , 'BudgetMillions')#scatterplots are maped in facetgrid


# In[73]:


## python is not vectorize programming language
# Building dashboards (dashboard - combination of chats)

sns.set_style('darkgrid')
f, axes = plt.subplots (2,2, figsize = (15,15))

k1 = sns.kdeplot(x=movies['BudgetMillions'],y=movies['Audience Rating'],ax=axes[0,0])
k2 = sns.kdeplot(x=movies['BudgetMillions'],y=movies['Critic Rating'],ax = axes[0,1])

k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))

z = sns.violinplot(data=movies[movies.Genre=='Drama'], x='Year', y = 'Critic Rating', ax=axes[1,0])

k4 = sns.kdeplot(x=movies['Critic Rating'],y=movies['Audience Rating'],shade = True,shade_lowest=False,cmap='Reds',ax=axes[1,1])

k4b = sns.kdeplot(x=movies['Critic Rating'], y=movies['Audience Rating'],cmap='Reds',ax = axes[1,1])

plt.show()


# In[75]:


# How can you style your dashboard  using different color map

# python is not vectorize programming language
# Building dashboards (dashboard - combination of chats)

sns.set_style('dark',{'axes.facecolor':'black'})
f, axes = plt.subplots (2,2, figsize = (15,15))

#plot [0,0]
k1 = sns.kdeplot(x=movies['BudgetMillions'],y=movies['Audience Rating'], \
                 shade = True, shade_lowest=True,cmap = 'inferno', \
                 ax = axes[0,0])
k1b = sns.kdeplot(x=movies['BudgetMillions'], y=movies['Audience Rating'], \
                 cmap = 'cool',ax = axes[0,0])

#plot [0,1]
k2 = sns.kdeplot(x=movies['BudgetMillions'],y=movies['Critic Rating'],\
                 shade=True, shade_lowest=True, cmap='inferno',\
                 ax = axes[0,1])
k2b = sns.kdeplot(x=movies['BudgetMillions'],y=movies['Critic Rating'],\
                  cmap = 'cool', ax = axes[0,1])

#plot[1,0]
z = sns.violinplot(data=movies[movies.Genre=='Drama'], \
                   x='Year', y = 'Critic Rating', ax=axes[1,0])

#plot[1,1]
k4 = sns.kdeplot(x=movies['Critic Rating'],y=movies['Audience Rating'], \
                 shade = True,shade_lowest=False,cmap='Blues_r', \
                 ax=axes[1,1])

k4b = sns.kdeplot(x=movies['Critic Rating'], y=movies['Audience Rating'], \
                  cmap='gist_gray_r',ax = axes[1,1])


k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))

plt.show()


# #### Final discussion what we learn so far - 1> category datatype in python 2> jointplots 3> histogram 4> stacked histograms 5> Kde plot 6> subplot 7> violin plots 8> Factet grid 9> Building dashboards

# In[ ]:




